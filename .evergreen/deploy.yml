functions:
  deploy:
    - command: shell.exec
      params:
        script: |
          if [ "${target}" = "staging" ]; then
            echo "REACT_APP_HONEYCOMB_ENDPOINT: ${HONEYCOMB_ENDPOINT_STAGING}" >> honeycomb.yml
            echo "REACT_APP_HONEYCOMB_INGEST_KEY: ${HONEYCOMB_INGEST_KEY_STAGING}" >> honeycomb.yml
            # If target is production or beta, set the honeycomb endpoint and ingest key to production
          elif [ "${target}" = "production" ] || [ "${target}" = "beta" ]; then
            echo "REACT_APP_HONEYCOMB_ENDPOINT: ${HONEYCOMB_ENDPOINT_PROD}" >> honeycomb.yml
            echo "REACT_APP_HONEYCOMB_INGEST_KEY: ${HONEYCOMB_INGEST_KEY_PROD}" >> honeycomb.yml
          fi
    - command: expansions.update
      params:
        redact_file_expansions: true
        file: honeycomb.yml
    - command: shell.exec
      params:
        working_dir: ui/${app_dir}
        include_expansions_in_env:
          - BUCKET
          - PARSLEY_SENTRY_AUTH_TOKEN
          - REACT_APP_HONEYCOMB_ENDPOINT
          - REACT_APP_HONEYCOMB_INGEST_KEY
          - REACT_APP_PARSLEY_SENTRY_DSN
          - REACT_APP_SPRUCE_SENTRY_DSN
          - REACT_APP_SPRUCE_URL
          - REACT_APP_UI_URL
          - REACT_APP_USER_KEY
          - SPRUCE_SENTRY_AUTH_TOKEN
        env:
          AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
          AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
        script: |
          ${PREPARE_SHELL}
          # Add PROFILER to env if profiler patch parameter is set to true.
          if [ "${profiler}" = "true" ]; then
              echo "PROFILER is set to true, adding profiler to the build"
              PROFILER=true PROFILE_HEAD="<script src=\"https://localhost:8097\"></script>" yarn env-cmd --no-override -e "${target}" yarn deploy-utils-build-and-push
          else
              yarn env-cmd --no-override -e "${target}" yarn deploy-utils-build-and-push
          fi
  email:
    - command: shell.exec
      params:
        working_dir: ui/${app_dir}
        env:
          EVERGREEN_API_SERVER_HOST: ${evergreen_api_server_host}
          EVERGREEN_UI_SERVER_HOST: ${evergreen_ui_server_host}
          EVERGREEN_API_KEY: ${evergreen_api_key}
          EVERGREEN_USER: ${evergreen_user}
        script: |
          echo "populating evergreen.yml"
          cat <<EOF > .evergreen.yml
          api_server_host: $EVERGREEN_API_SERVER_HOST
          ui_server_host: $EVERGREEN_UI_SERVER_HOST
          api_key: $EVERGREEN_API_KEY
          user: $EVERGREEN_USER
          EOF
          echo "Done populating evergreen.yml"
    - command: shell.exec
      params:
        working_dir: ui/${app_dir}
        env:
          EXECUTION: ${execution}
          DEPLOYS_EMAIL: ${DEPLOYS_EMAIL}
          AUTHOR_EMAIL: ${author_email}
        script: |
          ${PREPARE_SHELL}
          yarn deploy-utils-email

  prepare-user-deploy-vars:
    - command: shell.exec
      type: setup
      params:
        script: |
          if ! [ -z "${staging_user_key}" ]; then
            echo "BUCKET: spruce-${staging_user_key}" >> deploy-vars.yml
            echo "REACT_APP_USER_KEY: ${staging_user_key}" >> deploy-vars.yml
            echo "REACT_APP_SPRUCE_URL: https://spruce.${staging_user_key}.evergreen-staging.devprod.mongodb.com" >> deploy-vars.yml
            echo "REACT_APP_UI_URL: https://evergreen-multi.staging.corp.mongodb.com" >> deploy-vars.yml
            echo "USER_STAGING_ARN: ${user_staging_arn_prefix}${staging_user_key}.ui_put" >> deploy-vars.yml
          else
            echo "Must include staging_user_key as a task parameter."
            exit 1
          fi
    - command: expansions.update
      params:
        redact_file_expansions: true
        file: deploy-vars.yml

  write-previous-deploy:
    - command: shell.exec
      params:
        working_dir: ui/${app_dir}
        script: |
          ${PREPARE_SHELL}
          yarn deploy-utils-write-previous-deploy

tasks:
  - name: deploy-parsley-staging
    commands:
      - func: symlink
        vars:
          app_dir: apps/parsley
      - func: deploy
        vars:
          app_dir: apps/parsley
          target: staging

  - name: deploy-parsley-beta
    commands:
      - func: symlink
        vars:
          app_dir: apps/parsley
      - func: deploy
        vars:
          app_dir: apps/parsley
          target: beta

  - name: deploy-parsley-prod
    commands:
      - func: write-previous-deploy
      - func: symlink
      - func: deploy
        vars:
          target: production
      - func: email

  - name: deploy-spruce-staging
    commands:
      - func: symlink
        vars:
          app_dir: apps/spruce
      - func: deploy
        vars:
          app_dir: apps/spruce
          target: staging

  - name: deploy-spruce-beta
    commands:
      - func: symlink
        vars:
          app_dir: apps/spruce
      - func: deploy
        vars:
          app_dir: apps/spruce
          target: beta

  - name: deploy-spruce-prod
    commands:
      - func: write-previous-deploy
      - func: symlink
      - func: deploy
        vars:
          target: production
      - func: email

  - name: sync-spruce-staging
    commands:
      - func: prepare-user-deploy-vars
      - func: assume-user-staging-ec2-role
      - func: deploy
        vars:
          app_dir: apps/spruce
          target: staging

parameters:
  - key: profiler
    value: false
    description: Specify whether to include the profiler in the build.
