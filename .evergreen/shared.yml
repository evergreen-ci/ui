functions:
  assume-ec2-role:
    command: ec2.assume_role
    params:
      role_arn: ${ASSUME_ROLE_ARN}

  # Assume role with access to each user's staging bucket.
  assume-user-staging-ec2-role:
    command: ec2.assume_role
    params:
      role_arn: ${USER_STAGING_ARN}

  check-codegen:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && ./scripts/check_codegen.sh"]

  get-project:
    command: git.get_project
    type: setup
    params:
      directory: ui
      shallow_clone: true

  generate-token:
    - command: github.generate_token
      type: setup
      params:
        expansion_name: github_token
    - command: subprocess.exec
      params:
        binary: bash
        args: ["-c", "git config --global url.\"https://x-access-token:${github_token}@github.com/evergreen-ci/\".insteadOf https://github.com/evergreen-ci/"]

  run-make-background:
    command: subprocess.exec
    params:
      working_dir: ui/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: true
      env:
        SETTINGS_OVERRIDE: file
        GOROOT: ${goroot}

  run-logkeeper:
    command: subprocess.exec
    params:
      working_dir: ui/logkeeper
      background: true
      binary: bash
      args: ["-c", "go run main/logkeeper.go --localPath ../evergreen/_bucketdata"]
      env:
        GOROOT: ${goroot}
        PATH: ${goroot}/bin:$PATH
        LK_CORS_ORIGINS: http:\/\/localhost:\d+

  seed-bucket-data:
    command: s3.get
    type: setup
    params:
      aws_key: ${AWS_ACCESS_KEY_ID}
      aws_secret: ${AWS_SECRET_ACCESS_KEY}
      aws_session_token: ${AWS_SESSION_TOKEN}
      extract_to: ui/evergreen
      remote_file: _bucketdata.tar.gz
      bucket: parsley-test

  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGODB_URL: ${mongodb_url_2204}
          MONGODB_DECOMPRESS: ${decompress}
        working_dir: ui/evergreen
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGOSH_URL: ${mongosh_url_2204}
          MONGOSH_DECOMPRESS: ${decompress}
        working_dir: ui/evergreen
        command: make get-mongosh
    - command: subprocess.exec
      type: setup
      params:
        background: true
        # Turn off silent to enable DB logging for debugging purposes
        silent: true
        working_dir: ui/evergreen
        binary: bash
        args: ["-c", "mkdir -p bin && make start-mongod > bin/mongod-logs.txt 2>&1"]
    - command: subprocess.exec
      type: setup
      params:
        working_dir: ui/evergreen
        command: make configure-mongod
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args: ["-c", "${PREPARE_SHELL} && cd $PROJECT_DIRECTORY && mkdir mongodb-tools && cd mongodb-tools && curl ${mongodb_tools_url} -o mongodb-tools.tgz && ${decompress} mongodb-tools.tgz && mv ./mongodb-*/bin/* ."]

  setup-node:
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - ui/.evergreen/scripts/prepare-shell.sh
    - command: expansions.update
      params:
        file: expansion.yml
    - command: subprocess.exec
      params:
        exec_timeout_secs: 60
        binary: bash
        args: ["ui/.evergreen/scripts/setup-node.sh"]

  symlink:
    command: subprocess.exec
    params:
      working_dir: ui
      binary: bash
      args: ["-c", "ln -s ${workdir}/ui/evergreen/graphql/schema ${app_dir}/sdlschema"]

  wait-for-evergreen:
    command: subprocess.exec
    type: setup
    params:
      exec_timeout_secs: 600
      working_dir: ui/.evergreen
      binary: bash
      args:
        - ./scripts/wait-for-evergreen.sh

  yarn-build:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && yarn build:local"]

  yarn-cypress:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      binary: bash
      args: ["../.evergreen/scripts/run-cypress.sh"]
      env:
        STAGING_RUNTIME_ENVIRONMENTS_BASE_URL: ${staging_runtime_environments_base_url}
        STAGING_RUNTIME_ENVIRONMENTS_API_KEY: ${staging_runtime_environments_api_key}

  yarn-eslint:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && yarn eslint:strict"]

  yarn-install:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && yarn install"]

  yarn-preview:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      background: true
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && yarn preview --no-request-logging"]

  yarn-serve:
    command: subprocess.exec
    type: setup
    params:
      working_dir: ui/${app_dir}
      background: true
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && yarn serve"]

  yarn-snapshot:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && yarn snapshot"]

  yarn-storybook-build:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && yarn storybook:build"]

  yarn-test:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && yarn test"]

  yarn-tsc:
    command: subprocess.exec
    params:
      working_dir: ui/${app_dir}
      binary: bash
      args: ["-c", "${PREPARE_SHELL} && yarn check-types"]

  yarn-verify-backend:
    command: subprocess.exec
    params:
      working_dir: ui/.evergreen
      command: bash scripts/verify-backend.sh

tasks:
  - name: check_codegen
    commands:
      - func: symlink
      - func: check-codegen

  - name: compile
    commands:
      - func: symlink
      - func: yarn-build

  # Updates to e2e should also be applied to e2e_parallel in `generate-parallel-e2e-tasks.js`.
  - name: e2e
    commands:
      - func: setup-mongodb
      - func: generate-token
      - func: run-make-background
        vars:
          target: local-evergreen
      - func: symlink
      - func: seed-bucket-data
      - func: run-logkeeper
      - func: yarn-build
      - func: yarn-preview
      - func: wait-for-evergreen
      - func: yarn-verify-backend
      - func: yarn-cypress

  - name: lint
    commands:
      - func: symlink
      - func: yarn-eslint

  - name: snapshots
    commands:
      - func: yarn-snapshot

  - name: storybook
    commands:
      - func: yarn-storybook-build

  - name: test
    commands:
    - func: yarn-test

  - name: type_check
    commands:
      - func: symlink
      - func: yarn-tsc
