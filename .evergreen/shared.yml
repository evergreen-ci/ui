functions:
  assume-ec2-role:
    command: ec2.assume_role
    params:
      role_arn: ${ASSUME_ROLE_ARN}

  check-codegen:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      script: |
        ${PREPARE_SHELL}
        ./scripts/check_codegen.sh

  get-project:
    command: git.get_project
    type: setup
    params:
      directory: ui
      shallow_clone: true

  run-make-background:
    command: subprocess.exec
    params:
      working_dir: ui/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: true
      env:
        SETTINGS_OVERRIDE: file
        GOROOT: ${goroot}

  run-logkeeper:
    command: shell.exec
    params:
      working_dir: ui/logkeeper
      background: true
      script: go run main/logkeeper.go --localPath ../evergreen/_bucketdata
      shell: bash
      env:
        GOROOT: ${goroot}
        PATH: ${goroot}/bin:$PATH
        LK_CORS_ORIGINS: http:\/\/localhost:\d+

  seed-bucket-data:
    command: s3.get
    type: setup
    params:
      aws_key: ${AWS_ACCESS_KEY_ID}
      aws_secret: ${AWS_SECRET_ACCESS_KEY}
      aws_session_token: ${AWS_SESSION_TOKEN}
      extract_to: ui/evergreen
      remote_file: _bucketdata.tar.gz
      bucket: parsley-test

  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGODB_URL: ${mongodb_url_2204}
          MONGODB_DECOMPRESS: ${decompress}
        working_dir: ui/evergreen
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGOSH_URL: ${mongosh_url_2204}
          MONGOSH_DECOMPRESS: ${decompress}
        working_dir: ui/evergreen
        command: make get-mongosh
    - command: subprocess.exec
      type: setup
      params:
        background: true
        # Turn off silent to enable DB logging for debugging purposes
        silent: true
        working_dir: ui/evergreen
        command: make start-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: ui/evergreen
        command: make configure-mongod
    - command: shell.exec
      type: setup
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd $PROJECT_DIRECTORY
          mkdir mongodb-tools && cd mongodb-tools
          curl ${mongodb_tools_url} -o mongodb-tools.tgz
          ${decompress} mongodb-tools.tgz
          mv ./mongodb-*/bin/* .

  setup-node:
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - ui/.evergreen/scripts/prepare-shell.sh
    - command: expansions.update
      params:
        file: expansion.yml
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}

          # Fetch NVM and install it into this task's .nvm directory
          # Once downloaded, source nvm and install yarn
          git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
          cd "$NVM_DIR"
          git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          cd -

          # Retry the download for Node in case it flakes.
          for i in {1..5}; do
            nvm install --no-progress --default ${node_version}
            [[ $? -eq 0 ]] && break
            echo "Attempt $i of 5 to install Node failed"
            sleep 10
          done
          npm install -g yarn
          npm install -g env-cmd

  symlink:
    command: shell.exec
    params:
      working_dir: ui
      shell: bash
      script: |
        ln -s ${workdir}/ui/evergreen/graphql/schema ${app_dir}/sdlschema

  wait-for-evergreen:
    command: shell.exec
    type: setup
    params:
      exec_timeout_secs: 600
      working_dir: ui/.evergreen
      script: ./scripts/wait-for-evergreen.sh

  yarn-build:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn build:local

  yarn-cypress:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      shell: bash
      env:
        STAGING_RUNTIME_ENVIRONMENTS_BASE_URL: ${staging_runtime_environments_base_url}
        STAGING_RUNTIME_ENVIRONMENTS_API_KEY: ${staging_runtime_environments_api_key}
      script: |
        ${PREPARE_SHELL}
        # Allow spec filtering for an intentional patch.
        if [[ "${cypress_spec}" != "" ]]; then
          yarn cy:run --reporter junit --spec "${cypress_spec}"
        else
          yarn cy:run --reporter junit
        fi

  yarn-eslint:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn eslint:strict

  yarn-install:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn install

  yarn-preview:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      background: true
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn preview --no-request-logging

  yarn-serve:
    command: shell.exec
    type: setup
    params:
      working_dir: ui/${app_dir}
      background: true
      script: |
        ${PREPARE_SHELL}
        yarn serve

  yarn-snapshot:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      script: |
        ${PREPARE_SHELL}
        yarn snapshot

  yarn-storybook-build:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      script: |
        ${PREPARE_SHELL}
        yarn storybook:build

  yarn-test:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      script: |
        ${PREPARE_SHELL}
        yarn test

  yarn-tsc:
    command: shell.exec
    params:
      working_dir: ui/${app_dir}
      script: |
        ${PREPARE_SHELL}
        yarn check-types

  yarn-verify-backend:
    command: subprocess.exec
    params:
      working_dir: ui/.evergreen
      command: bash scripts/verify-backend.sh

tasks:
  - name: check_codegen
    commands:
      - func: symlink
      - func: check-codegen

  - name: compile
    commands:
      - func: symlink
      - func: yarn-build

  # Updates to e2e should likely also be applied to e2e_parallel in the task generator.
  - name: e2e
    commands:
      - func: setup-mongodb
      - func: run-make-background
        vars:
          target: local-evergreen
      - func: symlink
      - func: seed-bucket-data
      - func: run-logkeeper
      - func: yarn-build
      - func: yarn-preview
      - func: wait-for-evergreen
      - func: yarn-verify-backend
      - func: yarn-cypress

  - name: lint
    commands:
      - func: symlink
      - func: yarn-eslint

  - name: snapshots
    commands:
      - func: yarn-snapshot

  - name: storybook
    commands:
      - func: yarn-storybook-build

  - name: test
    commands:
    - func: yarn-test

  - name: type_check
    commands:
      - func: symlink
      - func: yarn-tsc
