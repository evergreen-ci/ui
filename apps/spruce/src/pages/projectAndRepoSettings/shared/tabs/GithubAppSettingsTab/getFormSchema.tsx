import { css } from "@emotion/react";
import styled from "@emotion/styled";
import { StyledLink, StyledRouterLink } from "@evg-ui/lib/components/styles";
import { size } from "@evg-ui/lib/constants/tokens";
import { GetFormSchema } from "components/SpruceForm";
import {
  CardFieldTemplate,
  FieldRow,
} from "components/SpruceForm/FieldTemplates";
import { githubTokenPermissionRestrictionsUrl } from "constants/externalResources";
import {
  getProjectSettingsRoute,
  ProjectSettingsTabRoutes,
} from "constants/routes";
import { GitHubDynamicTokenPermissionGroup } from "gql/generated/types";
import { form } from "../utils";
import { GithubAppActions, RequesterTypeField } from "./Fields";
import { ArrayFieldTemplate } from "./FieldTemplates";

const { placeholderIf } = form;

const allPermissionsGroup = "";

/** No permissions is hardcoded in the Evergreen codebase as the given string. */
const noPermissionsGroup = "No Permissions";

export const getFormSchema = ({
  defaultsToRepo,
  githubPermissionGroups,
  identifier,
  isAppDefined,
  projectId,
  repoData,
}: {
  githubPermissionGroups: GitHubDynamicTokenPermissionGroup[];
  identifier: string;
  isAppDefined: boolean;
  projectId: string;
  repoData?: any;
  defaultsToRepo: boolean;
}): ReturnType<GetFormSchema> => ({
  fields: {},
  schema: {
    definitions: {
      tokenPermissionRestrictionsObject: {
        type: "object" as const,
        title: "Token Permission Restrictions",
        properties: {
          permissionsByRequester: {
            type: "array" as const,
            items: {
              type: "object" as const,
              properties: {
                requesterType: {
                  type: "string" as const,
                  title: "",
                },
                permissionGroup: {
                  type: "string" as const,
                  title: "",
                  default: allPermissionsGroup,
                  oneOf: [
                    {
                      type: "string" as const,
                      title: "All app permissions",
                      enum: [allPermissionsGroup],
                    },
                    {
                      type: "string" as const,
                      title: "No permissions",
                      enum: [noPermissionsGroup],
                    },
                    ...githubPermissionGroups.map((pg) => ({
                      type: "string" as const,
                      title: pg.name,
                      enum: [pg.name],
                    })),
                  ],
                },
              },
            },
          },
        },
      },
    },
    type: "object" as const,
    properties: {
      appCredentials: {
        type: "object" as const,
        title: "App Credentials",
        properties: {
          githubAppAuth: {
            type: "object" as const,
            properties: {
              appId: {
                type: ["number", "null"],
                title: "App ID",
              },
              privateKey: {
                type: "string" as const,
                title: "App Key",
              },
            },
          },
          actions: {
            type: "null" as const,
            title: "",
          },
        },
      },
      tokenPermissionRestrictions: {
        title: "Token Permission Restrictions",
        $ref: "#/definitions/tokenPermissionRestrictionsObject",
      },
      repoData: {
        type: "object" as const,
        title: "",
        properties: {
          tokenPermissionRestrictions: {
            title: "Repo Token Permission Restrictions",
            $ref: "#/definitions/tokenPermissionRestrictionsObject",
          },
        },
      },
    },
  },
  uiSchema: {
    appCredentials: {
      githubAppAuth: {
        "ui:ObjectFieldTemplate": FieldRow,
        "ui:elementWrapperCSS": css`
          align-items: flex-start;
        `,
        appId: {
          "ui:data-cy": "github-app-id-input",
          "ui:disabled": isAppDefined,
          "ui:elementWrapperCSS": appFieldCss,
          ...placeholderIf(repoData?.appCredentials?.githubAppAuth?.appId),
        },
        privateKey: {
          "ui:data-cy": "github-private-key-input",
          "ui:disabled": isAppDefined,
          "ui:elementWrapperCSS": appFieldCss,
          "ui:widget": "textarea",
          ...placeholderIf(repoData?.appCredentials?.githubAppAuth?.privateKey),
        },
      },
      actions: {
        "ui:field": GithubAppActions,
        "ui:showLabel": false,
        options: { isAppDefined, projectId, defaultsToRepo },
      },
    },
    tokenPermissionRestrictions: {
      ...(defaultsToRepo && { "ui:widget": "hidden" }),
      "ui:ObjectFieldTemplate": CardFieldTemplate,
      "ui:description": (
        <StyledDescription>
          Dynamic Github Tokens generated by your project will have the full
          permissions of the Github app by default. Adding further restrictions
          will strengthen the security of your application. You can add
          restrictions either at the{" "}
          <StyledLink href={githubTokenPermissionRestrictionsUrl}>
            command level
          </StyledLink>{" "}
          or on this page using permission groups. Visit the{" "}
          <StyledRouterLink
            to={getProjectSettingsRoute(
              identifier,
              ProjectSettingsTabRoutes.GithubPermissionGroups,
            )}
          >
            GitHub Permission Groups tab
          </StyledRouterLink>{" "}
          to define permission groups.
        </StyledDescription>
      ),
      permissionsByRequester: permissionsByRequesterUISchema,
    },
    repoData: {
      "ui:readonly": true,
      tokenPermissionRestrictions: {
        ...(!defaultsToRepo && { "ui:widget": "hidden" }),
        "ui:ObjectFieldTemplate": CardFieldTemplate,
        "ui:description": (
          <StyledDescription>
            This project is using the GitHub app defined in the corresponding
            repo, and is inheriting the repo&apos;s token permission
            restrictions. You must create and define a GitHub app specifically
            for this project if you want to override the following settings.
          </StyledDescription>
        ),
        permissionsByRequester: permissionsByRequesterUISchema,
      },
    },
  },
});

const tokenFieldCss = css`
  margin: ${size.xs} 0;
`;

const appFieldCss = css`
  max-width: unset;
`;

const StyledDescription = styled.span`
  display: block;
  margin-bottom: ${size.xs};
`;

const permissionsByRequesterUISchema = {
  "ui:ArrayFieldTemplate": ArrayFieldTemplate,
  "ui:addable": false,
  "ui:orderable": false,
  "ui:removable": false,
  "ui:showLabel": false,
  items: {
    "ui:ObjectFieldTemplate": FieldRow,
    requesterType: {
      "ui:field": RequesterTypeField,
      "ui:elementWrapperCSS": tokenFieldCss,
      "ui:showLabel": false,
    },
    permissionGroup: {
      "ui:allowDeselect": false,
      "ui:ariaLabelledBy": "Permission Group",
      "ui:data-cy": "permission-group-input",
      "ui:elementWrapperCSS": tokenFieldCss,
      "ui:sizeVariant": "small",
    },
  },
};
