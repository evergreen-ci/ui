import { css } from "@emotion/react";
import styled from "@emotion/styled";
import InlineDefinition from "@leafygreen-ui/inline-definition";
import { Body } from "@leafygreen-ui/typography";
import { Field } from "@rjsf/core";
import { GetFormSchema } from "components/SpruceForm";
import {
  CardFieldTemplate,
  FieldRow,
} from "components/SpruceForm/FieldTemplates";
import { StyledLink, StyledRouterLink } from "components/styles";
import { githubTokenPermissionRestrictionsUrl } from "constants/externalResources";
import {
  requesterToTitle,
  requesterToDescription,
  Requester,
} from "constants/requesters";
import {
  getProjectSettingsRoute,
  ProjectSettingsTabRoutes,
} from "constants/routes";
import { size } from "constants/tokens";
import { GitHubDynamicTokenPermissionGroup } from "gql/generated/types";
import { ArrayFieldTemplate } from "./FieldTemplates";

/** All permissions group is the default if no permission group is set. */
const allPermissionsGroup = "";

/** No permissions is hardcoded in the Evergreen codebase as the given string. */
const noPermissionsGroup = "No Permissions";

export const getFormSchema = ({
  githubPermissionGroups,
  identifier,
}: {
  githubPermissionGroups: GitHubDynamicTokenPermissionGroup[];
  identifier: string;
}): ReturnType<GetFormSchema> => ({
  fields: {},
  schema: {
    type: "object" as "object",
    properties: {
      appCredentials: {
        type: "object" as "object",
        title: "App Credentials",
      },
      tokenPermissionRestrictions: {
        type: "object" as "object",
        title: "Token Permission Restrictions",
        properties: {
          permissionsByRequester: {
            type: "array" as "array",
            items: {
              type: "object" as "object",
              properties: {
                requesterType: {
                  type: "string" as "string",
                  title: "",
                },
                permissionGroup: {
                  type: "string" as "string",
                  title: "",
                  default: allPermissionsGroup,
                  oneOf: [
                    {
                      type: "string" as "string",
                      title: "All app permissions",
                      enum: [allPermissionsGroup],
                    },
                    {
                      type: "string" as "string",
                      title: "No permissions",
                      enum: [noPermissionsGroup],
                    },
                    ...githubPermissionGroups.map((pg) => ({
                      type: "string" as "string",
                      title: pg.name,
                      enum: [pg.name],
                    })),
                  ],
                },
              },
            },
          },
        },
      },
    },
  },
  uiSchema: {
    tokenPermissionRestrictions: {
      "ui:ObjectFieldTemplate": CardFieldTemplate,
      "ui:description": (
        <StyledDescription>
          Dynamic Github Tokens generated by your project will have the full
          permissions of the Github app by default. Adding further restrictions
          will strengthen the security of your application. You can add
          restrictions either at the{" "}
          <StyledLink href={githubTokenPermissionRestrictionsUrl}>
            command level
          </StyledLink>{" "}
          or on this page using permission groups. Visit the{" "}
          <StyledRouterLink
            to={getProjectSettingsRoute(
              identifier,
              ProjectSettingsTabRoutes.GithubPermissionGroups,
            )}
          >
            GitHub Permission Groups tab
          </StyledRouterLink>{" "}
          to define permission groups.
        </StyledDescription>
      ),
      permissionsByRequester: {
        "ui:ArrayFieldTemplate": ArrayFieldTemplate,
        "ui:addable": false,
        "ui:orderable": false,
        "ui:removable": false,
        "ui:showLabel": false,
        items: {
          "ui:ObjectFieldTemplate": FieldRow,
          requesterType: {
            "ui:field": RequesterTypeField,
            "ui:elementWrapperCSS": fieldCss,
            "ui:showLabel": false,
          },
          permissionGroup: {
            "ui:allowDeselect": false,
            "ui:ariaLabelledBy": "Permission Group",
            "ui:data-cy": "permission-group-input",
            "ui:elementWrapperCSS": fieldCss,
            "ui:sizeVariant": "small",
          },
        },
      },
    },
  },
});

const RequesterTypeField: Field = ({ formData }: { formData: Requester }) =>
  requesterToDescription[formData] ? (
    <InlineDefinition definition={requesterToDescription[formData]}>
      {requesterToTitle[formData]}
    </InlineDefinition>
  ) : (
    <Body>{requesterToTitle[formData]}</Body>
  );

const fieldCss = css`
  margin: ${size.xs} 0;
`;

const StyledDescription = styled.span`
  display: block;
  margin-bottom: ${size.xs};
`;
